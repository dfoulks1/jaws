#!/usr/bin/env python3
import argparse
import yaml
import json
import pprint
import requests
import getpass

class JawsRunner:
    def __init__(self, conf):
        self.conf = conf
        self.pp = pprint.PrettyPrinter()
        
        self.s = requests.Session()
        if conf["headers"] is not None:
            self.s.headers.update(conf["headers"])

        if "auth" in conf.keys():
            if "username" in conf["auth"].keys() and conf["auth"]["username"] is not None:
                username = conf["auth"]["username"]
            else:
                username = input("Username: ")

            if "password" in conf["auth"].keys() and conf["auth"]["password"] is not None:
                password = conf["auth"]["password"]
            else:
                password = str(getpass.getpass("%s password:" % username))

        self.s.auth = (username, password)

    def run(self):
        for task in self.conf["tasks"]:
            print("### %s ###" % task["name"])
            
            if "data" in task.keys() and task["data"] is not None:
                data = str(task["data"]).replace("'","\"")
            else:
                data = None
            print("  - Payload: %s" % data)

            #if data is not None: print(data)
            if "stub_override" in task.keys() and task["stub_override"]:
                url = task["stub_override"]
            else:
                url = self.conf["stub"]

            print("  - URL: %s/%s" % (url,task["uri"]))

            if "req" not in task.keys() or task["req"] is None:
                print("No Action specified, bailing out!")
                break
            elif task["req"] == "get":
                t = self.s.get("/".join([url, task["uri"]]), data = data)
            elif task["req"] == "post":
                t = self.s.post("/".join([url, task["uri"]]), data = data)
            elif task["req"] == "delete":
                t = self.s.delete("/".join([url, task["uri"]]), data = data)
            elif task["req"] == "put":
                t = self.s.put("/".join([url, task["uri"]]), data = data)
            
            if str(t.status_code) not in ["404", "403", "402", "401"]:
                print("  - Status: SUCCESS")
            else:
                print("  - Status: ERROR")

            show_types = ["content", "status_code", "headers"]
            if "output" not in task.keys() or "type" not in task["output"].keys() or task["output"]["type"] is None or task["output"]["type"] == "":
                continue

            elif task["output"]["type"] == "print":
                if "show" in task["output"].keys() and task["output"]["show"] in show_types:
                    print(getattr(t, task["output"]["show"]))
                else:
                    print(t.content)
            elif task["output"]["type"] == "store":
                if "dest" in task["output"]:
                    fh = task["output"]["dest"]
                else:
                    fh = input("Storage file: ")
                if "show" in task["output"].keys() and task["output"]["show"] in show_types:
                    with open(fh, "w+") as f:
                        json.dump(json.loads(task["output"]["show"]), f)
                else:
                    with open(fh, "w+") as f:
                        json.dump(json.loads(t.content), f)

    def dump(self):
        self.pp.pprint()

def main(args):
    conf = yaml.safe_load(open(args.jobfile, "r"))
    j = JawsRunner(conf)
    j.run()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PyF(etch)")
    parser.add_argument("-j", "--jobfile", default=None, help="YAML Jobfile")
    
    args = parser.parse_args()
    main(args)
