#!/usr/bin/env python3
import argparse
import yaml
import json
import pprint
import requests
import getpass

class JawsRunner:
    def __init__(self, conf):
        self.conf = conf
        self.pp = pprint.PrettyPrinter()
        
        stub = "https://issues.apache.org/jira/rest/api/2/"

        self.s = requests.Session()
        if conf["headers"] is not None:
            self.s.headers.update(conf["headers"])

        if "auth" in conf.keys():
            if conf["auth"]["username"] is not None:
                username = conf["auth"]["username"]
            else:
                username = input("Jira Username: ")

            if conf["auth"]["password"] is not None:
                password = conf["auth"]["password"]
            else:
                password = str(getpass.getpass("%s password:" % username))

        self.s.auth = (username, password)

    def run(self):
        for task in self.conf["tasks"]:
            print(task["name"])
            
            if "data" in task.keys() and task["data"] is not None:
                data = str(task["data"]).replace("'","\"")
            else:
                data = None

            if data is not None: print(data)

            if "req" not in task.keys() or task["req"] is None:
                print("No Action specified, bailing out!")
                break
            elif task["req"] == "get":
                t = self.s.get("/".join([self.conf["stub"], task["uri"]]), data = data)
            elif task["req"] == "post":
                t = self.s.post("/".join([self.conf["stub"], task["uri"]]), data = data)
            elif task["req"] == "delete":
                t = self.s.delete("/".join([self.conf["stub"], task["uri"]]), data = data)
            elif task["req"] == "put":
                t = self.s.put("/".join([self.conf["stub"], task["uri"]]), data = data)

            if "output" not in task.keys() or task["output"] is None or task["output"] == "":
                continue

            elif task["output"] == "print":
                print(t.content)
            elif task["output"] == "store":
                with open(input("Storage file: "), "w+") as f:
                    json.dump(json.loads(t.content), f)

        print("DONE!")

    def dump(self):
        self.pp.pprint()

def main(args):
    conf = yaml.safe_load(open(args.jobfile, "r"))
    j = JawsRunner(conf)
    j.run()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PyF(etch)")
    parser.add_argument("-j", "--jobfile", default=None, help="YAML Jobfile")
    
    args = parser.parse_args()
    main(args)
