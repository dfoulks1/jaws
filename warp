#!/usr/bin/env python3
import argparse
import getpass
import jinja2
import json
import pprint
import requests
import sys
import urllib
import yaml

class WarpRunner:
    def __init__(self, conf):
        self.conf = conf
        self.pp = pprint.PrettyPrinter()
        self.s = requests.Session()
        self.verbose = False
        self.show_types = ["content", "status_code", "headers"]
        
        # Set Verbosity
        if "verbose" in self.conf.keys(): 
            self.verbose = self.conf["verbose"]
        
        # Read in Job Vars
        if "vars" in conf.keys() and conf["vars"] is not None:
            self.vars = conf["vars"]
        else:
            self.vars = {}

        # Read in Job Headers
        if conf["headers"] is not None:
            self.s.headers.update(conf["headers"])

        # Authenticate if specified
        if "auth" in conf.keys():
            if "username" in conf["auth"].keys() and conf["auth"]["username"] is not None:
                username = self.interpret(conf["auth"]["username"])
            else:
                username = input("Username: ")

            if "password" in conf["auth"].keys() and conf["auth"]["password"] is not None:
                password = self.interpret(conf["auth"]["password"])
            else:
                password = str(getpass.getpass("%s password:" % username))
    
            self.s.auth = (username, password)

        # SSL Friendly certs settings
        if "certs" in conf.keys() and conf["certs"] is not None:
            if "ca_bundle" in conf["certs"].keys() and conf["certs"]["ca_bundle"]:
                self.s.verify = conf["certs"]["ca_bundle"]
            else:
                if self.conf["verbose"]: print("No ca_bundle specified, skipping...")

            certs = []
            if "client" in conf["certs"].keys() and conf["certs"]["client"]:
                certs.append(conf["certs"]["client"])
            else:
                if self.conf["verbose"]: print("No client specified, skipping...")
            
            if "key" in conf["certs"].keys() and conf["certs"]["key"]:
                certs.append(conf["certs"]["key"])
            else:
                if self.conf["verbose"]: print("No key specified, skipping...")

            if len(certs) == 2:
                c = tulpe(certs)
                self.s.cert = c
            elif len(certs) == 1:
                print(certs)
                self.s.cert = certs[0]

    def run(self):
        for task in self.conf["tasks"]:
            print("### %s ###" % task["name"])
            if "loop" in task.keys() and task["loop"] is not None:
                if "items" in task["loop"].keys() and task["loop"]["items"] is not None:
                    taskitems = self.interpret(task["loop"])
                if "iter_name" in task["loop"].keys() and task["loop"]["iter_name"] is not None:
                    itemname = task["loop"]["iter_name"]
                t = task.copy()
                t.pop("loop")
                print(t)
                #t = self.interpret(t,
            else: self.run_task(task)


    def run_task(self, task):

            if "data" in task.keys() and task["data"] is not None:
                data = self.interpret(json.dumps(task["data"]))
            else:
                data = None

            if self.verbose: print("  - Payload: %s" % data)

            if "stub_override" in task.keys() and task["stub_override"]:
                url = task["stub_override"]
            else:
                url = self.conf["stub"]

            if self.verbose: print("  - URL: %s/%s" % (url,task["uri"]))

            if "action" not in task.keys() or task["action"] is None:
                print("No Action specified, bailing out!")
            
            elif task["action"] == "get":
                t = self.s.get("/".join([url, self.interpret(task["uri"])]), data = data)
            elif task["action"] == "post":
                t = self.s.post("/".join([url, self.interpret(task["uri"])]), data = data)
            elif task["action"] == "delete":
                t = self.s.delete("/".join([url, self.interpret(task["uri"])]), data = data)
            elif task["action"] == "put":
                t = self.s.put("/".join([url, self.interpret(task["uri"])]), data = data)
            elif "dump" in task["action"].keys():
                if task["action"]["dump"] in self.vars.keys():
                    self.pp.pprint(self.vars[task["action"]["dump"]])
#                elif task["action"]["dump"] == "template":
#                    if "template_str" in task["output"].keys() and task["output"]["template_str"] is not None:
#                        print(self.interpret(task["output"]["template_str"], json.loads(t.content.decode('utf8'))))
#                    elif "template_file" in task["output"].keys() and task["output"]["template_file"] is not None:
#                        print(self.interpret(open(task["output"]["template_file"], "r").read(), json.loads(t.content.decode('utf8'))))
                else:
                    print("Name Not Found")
                
            if str(t.status_code) not in ["404", "403", "402", "401"]:
                print("  - Status: SUCCESS")
            else:
                print("  - Status: ERROR")

            if "output" not in task.keys() or "type" not in task["output"].keys() or task["output"]["type"] is None or task["output"]["type"] == "":
                pass

            elif task["output"]["type"] == "var":
                if "name" in task["output"].keys() and task["output"]["name"] is not None:
                    vname = task["output"]["name"]
                    if "show" in task["output"].keys() and task["output"]["show"] in show_types:
                        self.vars[vname] = json.loads(getattr(t, task["output"]["show"]))
                else:
                    print("Variables must have names!")
                    sys.exit(-1)

            elif task["output"]["type"] == "store":
                if "name" in task["output"]:
                    fh = task["output"]["name"]
                else:
                    fh = input("Storage file: ")
                if "show" in task["output"].keys() and task["output"]["show"] in show_types:
                    with open(fh, "w+") as f:
                        json.dump(json.loads(task["output"]["show"]), f)
                else:
                    with open(fh, "w+") as f:
                        json.dump(json.loads(t.content), f)

    def interpret(self, string, args=None):
        if not args:
            args = self.vars
        try:
            template = jinja2.Environment(loader=jinja2.BaseLoader).from_string(string)
            output = template.render(**args)
        except TypeError:
            output = string

        return output

def main(args):
    conf = yaml.safe_load(open(args.jobfile, "r"))
    job = WarpRunner(conf)
    job.run()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="PyF(etch)")
    parser.add_argument("-j", "--jobfile", default=None, help="YAML Jobfile")
    
    args = parser.parse_args()
    main(args)
